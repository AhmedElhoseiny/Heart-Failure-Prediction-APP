{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-05-20 12:52:36.292 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\egypt\\AppData\\Roaming\\Python\\Python310\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2024-05-20 12:52:36.673 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "\n",
    "# Function to load the model and inputs, with error handling\n",
    "def load_model_and_inputs():\n",
    "    try:\n",
    "        model = pd.read_pickle(\"model.pkl\")\n",
    "        inputs = pd.read_pickle(\"Inputs.pkl\")\n",
    "        return model, inputs\n",
    "    except FileNotFoundError as e:\n",
    "        st.error(f\"File not found: {e.filename}. Please ensure the file exists in the correct directory.\")\n",
    "        return None, None\n",
    "\n",
    "# Function to make predictions\n",
    "def prediction(model, inputs, Age, Sex, ChestPainType, RestingBP, Cholesterol, FastingBS, RestingECG, MaxHR, ExerciseAngina, Oldpeak, ST_Slope):\n",
    "    df = pd.DataFrame(columns=inputs)\n",
    "    df.at[0, \"Age\"] = Age    \n",
    "    df.at[0, \"ChestPainType\"] = ChestPainType\n",
    "    df.at[0, \"RestingBP\"] = RestingBP\n",
    "    df.at[0, \"Cholesterol\"] = Cholesterol\n",
    "    df.at[0, \"RestingECG\"] = RestingECG\n",
    "    df.at[0, \"MaxHR\"] = MaxHR\n",
    "    df.at[0, \"Oldpeak\"] = Oldpeak\n",
    "    df.at[0, \"ST_Slope\"] = ST_Slope\n",
    "    \n",
    "    df.at[0, \"FastingBS\"] = 1 if FastingBS == \"Yes\" else 0\n",
    "    df.at[0, \"Sex\"] = \"M\" if Sex == \"Male\" else \"F\"\n",
    "    df.at[0, \"ExerciseAngina\"] = \"Y\" if ExerciseAngina == \"Yes\" else \"N\"\n",
    "    \n",
    "    df_encoded = pd.get_dummies(df, columns=['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope'], drop_first=True)\n",
    "    \n",
    "    # Ensure all expected columns are present in df_encoded\n",
    "    for col in inputs:\n",
    "        if col not in df_encoded.columns:\n",
    "            df_encoded[col] = 0\n",
    "    \n",
    "    try:\n",
    "        result = model.predict(df_encoded)[0]\n",
    "    except Exception as e:\n",
    "        st.error(f\"Error during prediction: {e}\")\n",
    "        return None\n",
    "    return result\n",
    "\n",
    "# Main function to setup the Streamlit app\n",
    "def main():\n",
    "    st.title(\"Heart Failure Prediction\")\n",
    "\n",
    "    model, inputs = load_model_and_inputs()\n",
    "    if model is None or inputs is None:\n",
    "        return\n",
    "    \n",
    "    Sex = st.selectbox(\"Gender\", ['Male', 'Female'])\n",
    "    ChestPainType = st.selectbox(\"Chest Pain Type\", ['ASY', 'NAP', 'ATA', 'TA'])\n",
    "    Age = st.slider(\"Age\", min_value=15.0, max_value=100.0, step=1.0, value=50.0)\n",
    "    RestingBP = st.slider(\"Resting Blood Pressure\", min_value=0.0, max_value=200.0, step=1.0, value=120.0)\n",
    "    Cholesterol = st.slider(\"Cholesterol Level\", min_value=0.0, max_value=600.0, step=1.0, value=200.0)\n",
    "    FastingBS = st.selectbox(\"Fasting Blood Sugar\", ['Yes', 'No'])\n",
    "    RestingECG = st.selectbox(\"Resting Electrocardiogram Result\", ['Normal', 'LVH', 'ST'])\n",
    "    MaxHR = st.slider(\"Max Heart Rate\", min_value=60.0, max_value=202.0, step=1.0, value=150.0)\n",
    "    ExerciseAngina = st.selectbox(\"Exercise Angina\", ['Yes', 'No'])\n",
    "    Oldpeak = st.slider(\"Old Heart Peak\", min_value=-2.6, max_value=6.2, step=0.1, value=0.0)\n",
    "    ST_Slope = st.selectbox(\"ST/Heart Rate Slope\", ['Flat', 'Up', 'Down'])\n",
    "\n",
    "    linkedin_url = \"https://www.linkedin.com/in/ahmed-elhoseiny-2a952122a\"\n",
    "    github_url = \"https://github.com/AhmedElhoseiny\"\n",
    "    email = \"ahmedelhoseiny20022010@gmail.com\"\n",
    "    \n",
    "    # Sidebar with contact information\n",
    "    st.sidebar.image(\"Ahmed.jpg\", width=100)\n",
    "    st.sidebar.write(\"Connect with me:\")\n",
    "    st.sidebar.markdown(f\"[![Email](https://img.shields.io/badge/Email-Contact-informational)](mailto:{email})\")\n",
    "    st.sidebar.markdown(f\"[![GitHub](https://img.shields.io/badge/GitHub-Profile-green)]({github_url})\")\n",
    "    st.sidebar.markdown(f\"[![LinkedIn](https://img.shields.io/badge/LinkedIn-Profile-blue)]({linkedin_url})\")\n",
    "    \n",
    "    if st.button(\"Predict\"):\n",
    "        result = prediction(model, inputs, Age, Sex, ChestPainType, RestingBP, Cholesterol, FastingBS, RestingECG, MaxHR, ExerciseAngina, Oldpeak, ST_Slope)\n",
    "        if result is not None:\n",
    "            result_text = \"No Heart Diseases ‚ù§\" if result == 0 else \"High probability of Heart Diseases üíî\"\n",
    "            st.text(result_text)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
